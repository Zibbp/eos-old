// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/eos/ent/comment"
	"github.com/zibbp/eos/ent/predicate"
	"github.com/zibbp/eos/ent/video"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetText sets the "text" field.
func (cu *CommentUpdate) SetText(s string) *CommentUpdate {
	cu.mutation.SetText(s)
	return cu
}

// SetTimestamp sets the "timestamp" field.
func (cu *CommentUpdate) SetTimestamp(t time.Time) *CommentUpdate {
	cu.mutation.SetTimestamp(t)
	return cu
}

// SetLikeCount sets the "like_count" field.
func (cu *CommentUpdate) SetLikeCount(i int64) *CommentUpdate {
	cu.mutation.ResetLikeCount()
	cu.mutation.SetLikeCount(i)
	return cu
}

// AddLikeCount adds i to the "like_count" field.
func (cu *CommentUpdate) AddLikeCount(i int64) *CommentUpdate {
	cu.mutation.AddLikeCount(i)
	return cu
}

// SetIsFavorited sets the "is_favorited" field.
func (cu *CommentUpdate) SetIsFavorited(b bool) *CommentUpdate {
	cu.mutation.SetIsFavorited(b)
	return cu
}

// SetAuthor sets the "author" field.
func (cu *CommentUpdate) SetAuthor(s string) *CommentUpdate {
	cu.mutation.SetAuthor(s)
	return cu
}

// SetAuthorID sets the "author_id" field.
func (cu *CommentUpdate) SetAuthorID(s string) *CommentUpdate {
	cu.mutation.SetAuthorID(s)
	return cu
}

// SetAuthorThumbnail sets the "author_thumbnail" field.
func (cu *CommentUpdate) SetAuthorThumbnail(s string) *CommentUpdate {
	cu.mutation.SetAuthorThumbnail(s)
	return cu
}

// SetAuthorIsUploader sets the "author_is_uploader" field.
func (cu *CommentUpdate) SetAuthorIsUploader(b bool) *CommentUpdate {
	cu.mutation.SetAuthorIsUploader(b)
	return cu
}

// SetParent sets the "parent" field.
func (cu *CommentUpdate) SetParent(s string) *CommentUpdate {
	cu.mutation.SetParent(s)
	return cu
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (cu *CommentUpdate) SetVideoID(id string) *CommentUpdate {
	cu.mutation.SetVideoID(id)
	return cu
}

// SetVideo sets the "video" edge to the Video entity.
func (cu *CommentUpdate) SetVideo(v *Video) *CommentUpdate {
	return cu.SetVideoID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (cu *CommentUpdate) ClearVideo() *CommentUpdate {
	cu.mutation.ClearVideo()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CommentMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if _, ok := cu.mutation.VideoID(); cu.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.video"`)
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: comment.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cu.mutation.Timestamp(); ok {
		_spec.SetField(comment.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := cu.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.IsFavorited(); ok {
		_spec.SetField(comment.FieldIsFavorited, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Author(); ok {
		_spec.SetField(comment.FieldAuthor, field.TypeString, value)
	}
	if value, ok := cu.mutation.AuthorID(); ok {
		_spec.SetField(comment.FieldAuthorID, field.TypeString, value)
	}
	if value, ok := cu.mutation.AuthorThumbnail(); ok {
		_spec.SetField(comment.FieldAuthorThumbnail, field.TypeString, value)
	}
	if value, ok := cu.mutation.AuthorIsUploader(); ok {
		_spec.SetField(comment.FieldAuthorIsUploader, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Parent(); ok {
		_spec.SetField(comment.FieldParent, field.TypeString, value)
	}
	if cu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.VideoTable,
			Columns: []string{comment.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.VideoTable,
			Columns: []string{comment.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetText sets the "text" field.
func (cuo *CommentUpdateOne) SetText(s string) *CommentUpdateOne {
	cuo.mutation.SetText(s)
	return cuo
}

// SetTimestamp sets the "timestamp" field.
func (cuo *CommentUpdateOne) SetTimestamp(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetTimestamp(t)
	return cuo
}

// SetLikeCount sets the "like_count" field.
func (cuo *CommentUpdateOne) SetLikeCount(i int64) *CommentUpdateOne {
	cuo.mutation.ResetLikeCount()
	cuo.mutation.SetLikeCount(i)
	return cuo
}

// AddLikeCount adds i to the "like_count" field.
func (cuo *CommentUpdateOne) AddLikeCount(i int64) *CommentUpdateOne {
	cuo.mutation.AddLikeCount(i)
	return cuo
}

// SetIsFavorited sets the "is_favorited" field.
func (cuo *CommentUpdateOne) SetIsFavorited(b bool) *CommentUpdateOne {
	cuo.mutation.SetIsFavorited(b)
	return cuo
}

// SetAuthor sets the "author" field.
func (cuo *CommentUpdateOne) SetAuthor(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthor(s)
	return cuo
}

// SetAuthorID sets the "author_id" field.
func (cuo *CommentUpdateOne) SetAuthorID(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorID(s)
	return cuo
}

// SetAuthorThumbnail sets the "author_thumbnail" field.
func (cuo *CommentUpdateOne) SetAuthorThumbnail(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorThumbnail(s)
	return cuo
}

// SetAuthorIsUploader sets the "author_is_uploader" field.
func (cuo *CommentUpdateOne) SetAuthorIsUploader(b bool) *CommentUpdateOne {
	cuo.mutation.SetAuthorIsUploader(b)
	return cuo
}

// SetParent sets the "parent" field.
func (cuo *CommentUpdateOne) SetParent(s string) *CommentUpdateOne {
	cuo.mutation.SetParent(s)
	return cuo
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (cuo *CommentUpdateOne) SetVideoID(id string) *CommentUpdateOne {
	cuo.mutation.SetVideoID(id)
	return cuo
}

// SetVideo sets the "video" edge to the Video entity.
func (cuo *CommentUpdateOne) SetVideo(v *Video) *CommentUpdateOne {
	return cuo.SetVideoID(v.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearVideo clears the "video" edge to the Video entity.
func (cuo *CommentUpdateOne) ClearVideo() *CommentUpdateOne {
	cuo.mutation.ClearVideo()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	return withHooks[*Comment, CommentMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if _, ok := cuo.mutation.VideoID(); cuo.mutation.VideoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.video"`)
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: comment.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Timestamp(); ok {
		_spec.SetField(comment.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.IsFavorited(); ok {
		_spec.SetField(comment.FieldIsFavorited, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Author(); ok {
		_spec.SetField(comment.FieldAuthor, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AuthorID(); ok {
		_spec.SetField(comment.FieldAuthorID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AuthorThumbnail(); ok {
		_spec.SetField(comment.FieldAuthorThumbnail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AuthorIsUploader(); ok {
		_spec.SetField(comment.FieldAuthorIsUploader, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Parent(); ok {
		_spec.SetField(comment.FieldParent, field.TypeString, value)
	}
	if cuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.VideoTable,
			Columns: []string{comment.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.VideoTable,
			Columns: []string{comment.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
