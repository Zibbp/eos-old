// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUploadDate holds the string denoting the upload_date field in the database.
	FieldUploadDate = "upload_date"
	// FieldUploader holds the string denoting the uploader field in the database.
	FieldUploader = "uploader"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldDislikeCount holds the string denoting the dislike_count field in the database.
	FieldDislikeCount = "dislike_count"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldResolution holds the string denoting the resolution field in the database.
	FieldResolution = "resolution"
	// FieldFps holds the string denoting the fps field in the database.
	FieldFps = "fps"
	// FieldAudioCodec holds the string denoting the audio_codec field in the database.
	FieldAudioCodec = "audio_codec"
	// FieldVideoCodec holds the string denoting the video_codec field in the database.
	FieldVideoCodec = "video_codec"
	// FieldAbr holds the string denoting the abr field in the database.
	FieldAbr = "abr"
	// FieldVbr holds the string denoting the vbr field in the database.
	FieldVbr = "vbr"
	// FieldEpoch holds the string denoting the epoch field in the database.
	FieldEpoch = "epoch"
	// FieldCommentCount holds the string denoting the comment_count field in the database.
	FieldCommentCount = "comment_count"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCategories holds the string denoting the categories field in the database.
	FieldCategories = "categories"
	// FieldVideoPath holds the string denoting the video_path field in the database.
	FieldVideoPath = "video_path"
	// FieldThumbnailPath holds the string denoting the thumbnail_path field in the database.
	FieldThumbnailPath = "thumbnail_path"
	// FieldJSONPath holds the string denoting the json_path field in the database.
	FieldJSONPath = "json_path"
	// FieldCaptionPath holds the string denoting the caption_path field in the database.
	FieldCaptionPath = "caption_path"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the video in the database.
	Table = "videos"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "videos"
	// ChannelInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelInverseTable = "channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "channel_videos"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "chapters"
	// ChaptersInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChaptersInverseTable = "chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "video_chapters"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "video_comments"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldUploadDate,
	FieldUploader,
	FieldDuration,
	FieldViewCount,
	FieldLikeCount,
	FieldDislikeCount,
	FieldFormat,
	FieldWidth,
	FieldHeight,
	FieldResolution,
	FieldFps,
	FieldAudioCodec,
	FieldVideoCodec,
	FieldAbr,
	FieldVbr,
	FieldEpoch,
	FieldCommentCount,
	FieldTags,
	FieldCategories,
	FieldVideoPath,
	FieldThumbnailPath,
	FieldJSONPath,
	FieldCaptionPath,
	FieldPath,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "videos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"channel_videos",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
