// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/zibbp/eos/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDescription, v))
}

// UploadDate applies equality check predicate on the "upload_date" field. It's identical to UploadDateEQ.
func UploadDate(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadDate, v))
}

// Uploader applies equality check predicate on the "uploader" field. It's identical to UploaderEQ.
func Uploader(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploader, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDuration, v))
}

// ViewCount applies equality check predicate on the "view_count" field. It's identical to ViewCountEQ.
func ViewCount(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldViewCount, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldLikeCount, v))
}

// DislikeCount applies equality check predicate on the "dislike_count" field. It's identical to DislikeCountEQ.
func DislikeCount(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDislikeCount, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFormat, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldHeight, v))
}

// Resolution applies equality check predicate on the "resolution" field. It's identical to ResolutionEQ.
func Resolution(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldResolution, v))
}

// Fps applies equality check predicate on the "fps" field. It's identical to FpsEQ.
func Fps(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFps, v))
}

// AudioCodec applies equality check predicate on the "audio_codec" field. It's identical to AudioCodecEQ.
func AudioCodec(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldAudioCodec, v))
}

// VideoCodec applies equality check predicate on the "video_codec" field. It's identical to VideoCodecEQ.
func VideoCodec(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVideoCodec, v))
}

// Abr applies equality check predicate on the "abr" field. It's identical to AbrEQ.
func Abr(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldAbr, v))
}

// Vbr applies equality check predicate on the "vbr" field. It's identical to VbrEQ.
func Vbr(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVbr, v))
}

// Epoch applies equality check predicate on the "epoch" field. It's identical to EpochEQ.
func Epoch(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldEpoch, v))
}

// CommentCount applies equality check predicate on the "comment_count" field. It's identical to CommentCountEQ.
func CommentCount(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCommentCount, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTags, v))
}

// Categories applies equality check predicate on the "categories" field. It's identical to CategoriesEQ.
func Categories(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCategories, v))
}

// VideoPath applies equality check predicate on the "video_path" field. It's identical to VideoPathEQ.
func VideoPath(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVideoPath, v))
}

// ThumbnailPath applies equality check predicate on the "thumbnail_path" field. It's identical to ThumbnailPathEQ.
func ThumbnailPath(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldThumbnailPath, v))
}

// JSONPath applies equality check predicate on the "json_path" field. It's identical to JSONPathEQ.
func JSONPath(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldJSONPath, v))
}

// CaptionPath applies equality check predicate on the "caption_path" field. It's identical to CaptionPathEQ.
func CaptionPath(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCaptionPath, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldPath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldDescription, v))
}

// UploadDateEQ applies the EQ predicate on the "upload_date" field.
func UploadDateEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadDate, v))
}

// UploadDateNEQ applies the NEQ predicate on the "upload_date" field.
func UploadDateNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploadDate, v))
}

// UploadDateIn applies the In predicate on the "upload_date" field.
func UploadDateIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploadDate, vs...))
}

// UploadDateNotIn applies the NotIn predicate on the "upload_date" field.
func UploadDateNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploadDate, vs...))
}

// UploadDateGT applies the GT predicate on the "upload_date" field.
func UploadDateGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploadDate, v))
}

// UploadDateGTE applies the GTE predicate on the "upload_date" field.
func UploadDateGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploadDate, v))
}

// UploadDateLT applies the LT predicate on the "upload_date" field.
func UploadDateLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploadDate, v))
}

// UploadDateLTE applies the LTE predicate on the "upload_date" field.
func UploadDateLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploadDate, v))
}

// UploaderEQ applies the EQ predicate on the "uploader" field.
func UploaderEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploader, v))
}

// UploaderNEQ applies the NEQ predicate on the "uploader" field.
func UploaderNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploader, v))
}

// UploaderIn applies the In predicate on the "uploader" field.
func UploaderIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploader, vs...))
}

// UploaderNotIn applies the NotIn predicate on the "uploader" field.
func UploaderNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploader, vs...))
}

// UploaderGT applies the GT predicate on the "uploader" field.
func UploaderGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploader, v))
}

// UploaderGTE applies the GTE predicate on the "uploader" field.
func UploaderGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploader, v))
}

// UploaderLT applies the LT predicate on the "uploader" field.
func UploaderLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploader, v))
}

// UploaderLTE applies the LTE predicate on the "uploader" field.
func UploaderLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploader, v))
}

// UploaderContains applies the Contains predicate on the "uploader" field.
func UploaderContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldUploader, v))
}

// UploaderHasPrefix applies the HasPrefix predicate on the "uploader" field.
func UploaderHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldUploader, v))
}

// UploaderHasSuffix applies the HasSuffix predicate on the "uploader" field.
func UploaderHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldUploader, v))
}

// UploaderEqualFold applies the EqualFold predicate on the "uploader" field.
func UploaderEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldUploader, v))
}

// UploaderContainsFold applies the ContainsFold predicate on the "uploader" field.
func UploaderContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldUploader, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldDuration, v))
}

// ViewCountEQ applies the EQ predicate on the "view_count" field.
func ViewCountEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldViewCount, v))
}

// ViewCountNEQ applies the NEQ predicate on the "view_count" field.
func ViewCountNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldViewCount, v))
}

// ViewCountIn applies the In predicate on the "view_count" field.
func ViewCountIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldViewCount, vs...))
}

// ViewCountNotIn applies the NotIn predicate on the "view_count" field.
func ViewCountNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldViewCount, vs...))
}

// ViewCountGT applies the GT predicate on the "view_count" field.
func ViewCountGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldViewCount, v))
}

// ViewCountGTE applies the GTE predicate on the "view_count" field.
func ViewCountGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldViewCount, v))
}

// ViewCountLT applies the LT predicate on the "view_count" field.
func ViewCountLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldViewCount, v))
}

// ViewCountLTE applies the LTE predicate on the "view_count" field.
func ViewCountLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldViewCount, v))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldLikeCount, v))
}

// DislikeCountEQ applies the EQ predicate on the "dislike_count" field.
func DislikeCountEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDislikeCount, v))
}

// DislikeCountNEQ applies the NEQ predicate on the "dislike_count" field.
func DislikeCountNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldDislikeCount, v))
}

// DislikeCountIn applies the In predicate on the "dislike_count" field.
func DislikeCountIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldDislikeCount, vs...))
}

// DislikeCountNotIn applies the NotIn predicate on the "dislike_count" field.
func DislikeCountNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldDislikeCount, vs...))
}

// DislikeCountGT applies the GT predicate on the "dislike_count" field.
func DislikeCountGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldDislikeCount, v))
}

// DislikeCountGTE applies the GTE predicate on the "dislike_count" field.
func DislikeCountGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldDislikeCount, v))
}

// DislikeCountLT applies the LT predicate on the "dislike_count" field.
func DislikeCountLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldDislikeCount, v))
}

// DislikeCountLTE applies the LTE predicate on the "dislike_count" field.
func DislikeCountLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldDislikeCount, v))
}

// DislikeCountIsNil applies the IsNil predicate on the "dislike_count" field.
func DislikeCountIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldDislikeCount))
}

// DislikeCountNotNil applies the NotNil predicate on the "dislike_count" field.
func DislikeCountNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldDislikeCount))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatIsNil applies the IsNil predicate on the "format" field.
func FormatIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldFormat))
}

// FormatNotNil applies the NotNil predicate on the "format" field.
func FormatNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldFormat))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldFormat, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldWidth))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldHeight))
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldResolution, v))
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldResolution, v))
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldResolution, vs...))
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldResolution, vs...))
}

// ResolutionGT applies the GT predicate on the "resolution" field.
func ResolutionGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldResolution, v))
}

// ResolutionGTE applies the GTE predicate on the "resolution" field.
func ResolutionGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldResolution, v))
}

// ResolutionLT applies the LT predicate on the "resolution" field.
func ResolutionLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldResolution, v))
}

// ResolutionLTE applies the LTE predicate on the "resolution" field.
func ResolutionLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldResolution, v))
}

// ResolutionContains applies the Contains predicate on the "resolution" field.
func ResolutionContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldResolution, v))
}

// ResolutionHasPrefix applies the HasPrefix predicate on the "resolution" field.
func ResolutionHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldResolution, v))
}

// ResolutionHasSuffix applies the HasSuffix predicate on the "resolution" field.
func ResolutionHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldResolution, v))
}

// ResolutionIsNil applies the IsNil predicate on the "resolution" field.
func ResolutionIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldResolution))
}

// ResolutionNotNil applies the NotNil predicate on the "resolution" field.
func ResolutionNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldResolution))
}

// ResolutionEqualFold applies the EqualFold predicate on the "resolution" field.
func ResolutionEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldResolution, v))
}

// ResolutionContainsFold applies the ContainsFold predicate on the "resolution" field.
func ResolutionContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldResolution, v))
}

// FpsEQ applies the EQ predicate on the "fps" field.
func FpsEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFps, v))
}

// FpsNEQ applies the NEQ predicate on the "fps" field.
func FpsNEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldFps, v))
}

// FpsIn applies the In predicate on the "fps" field.
func FpsIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldFps, vs...))
}

// FpsNotIn applies the NotIn predicate on the "fps" field.
func FpsNotIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldFps, vs...))
}

// FpsGT applies the GT predicate on the "fps" field.
func FpsGT(v float64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldFps, v))
}

// FpsGTE applies the GTE predicate on the "fps" field.
func FpsGTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldFps, v))
}

// FpsLT applies the LT predicate on the "fps" field.
func FpsLT(v float64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldFps, v))
}

// FpsLTE applies the LTE predicate on the "fps" field.
func FpsLTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldFps, v))
}

// FpsIsNil applies the IsNil predicate on the "fps" field.
func FpsIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldFps))
}

// FpsNotNil applies the NotNil predicate on the "fps" field.
func FpsNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldFps))
}

// AudioCodecEQ applies the EQ predicate on the "audio_codec" field.
func AudioCodecEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldAudioCodec, v))
}

// AudioCodecNEQ applies the NEQ predicate on the "audio_codec" field.
func AudioCodecNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldAudioCodec, v))
}

// AudioCodecIn applies the In predicate on the "audio_codec" field.
func AudioCodecIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldAudioCodec, vs...))
}

// AudioCodecNotIn applies the NotIn predicate on the "audio_codec" field.
func AudioCodecNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldAudioCodec, vs...))
}

// AudioCodecGT applies the GT predicate on the "audio_codec" field.
func AudioCodecGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldAudioCodec, v))
}

// AudioCodecGTE applies the GTE predicate on the "audio_codec" field.
func AudioCodecGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldAudioCodec, v))
}

// AudioCodecLT applies the LT predicate on the "audio_codec" field.
func AudioCodecLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldAudioCodec, v))
}

// AudioCodecLTE applies the LTE predicate on the "audio_codec" field.
func AudioCodecLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldAudioCodec, v))
}

// AudioCodecContains applies the Contains predicate on the "audio_codec" field.
func AudioCodecContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldAudioCodec, v))
}

// AudioCodecHasPrefix applies the HasPrefix predicate on the "audio_codec" field.
func AudioCodecHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldAudioCodec, v))
}

// AudioCodecHasSuffix applies the HasSuffix predicate on the "audio_codec" field.
func AudioCodecHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldAudioCodec, v))
}

// AudioCodecIsNil applies the IsNil predicate on the "audio_codec" field.
func AudioCodecIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldAudioCodec))
}

// AudioCodecNotNil applies the NotNil predicate on the "audio_codec" field.
func AudioCodecNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldAudioCodec))
}

// AudioCodecEqualFold applies the EqualFold predicate on the "audio_codec" field.
func AudioCodecEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldAudioCodec, v))
}

// AudioCodecContainsFold applies the ContainsFold predicate on the "audio_codec" field.
func AudioCodecContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldAudioCodec, v))
}

// VideoCodecEQ applies the EQ predicate on the "video_codec" field.
func VideoCodecEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVideoCodec, v))
}

// VideoCodecNEQ applies the NEQ predicate on the "video_codec" field.
func VideoCodecNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldVideoCodec, v))
}

// VideoCodecIn applies the In predicate on the "video_codec" field.
func VideoCodecIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldVideoCodec, vs...))
}

// VideoCodecNotIn applies the NotIn predicate on the "video_codec" field.
func VideoCodecNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldVideoCodec, vs...))
}

// VideoCodecGT applies the GT predicate on the "video_codec" field.
func VideoCodecGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldVideoCodec, v))
}

// VideoCodecGTE applies the GTE predicate on the "video_codec" field.
func VideoCodecGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldVideoCodec, v))
}

// VideoCodecLT applies the LT predicate on the "video_codec" field.
func VideoCodecLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldVideoCodec, v))
}

// VideoCodecLTE applies the LTE predicate on the "video_codec" field.
func VideoCodecLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldVideoCodec, v))
}

// VideoCodecContains applies the Contains predicate on the "video_codec" field.
func VideoCodecContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldVideoCodec, v))
}

// VideoCodecHasPrefix applies the HasPrefix predicate on the "video_codec" field.
func VideoCodecHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldVideoCodec, v))
}

// VideoCodecHasSuffix applies the HasSuffix predicate on the "video_codec" field.
func VideoCodecHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldVideoCodec, v))
}

// VideoCodecIsNil applies the IsNil predicate on the "video_codec" field.
func VideoCodecIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldVideoCodec))
}

// VideoCodecNotNil applies the NotNil predicate on the "video_codec" field.
func VideoCodecNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldVideoCodec))
}

// VideoCodecEqualFold applies the EqualFold predicate on the "video_codec" field.
func VideoCodecEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldVideoCodec, v))
}

// VideoCodecContainsFold applies the ContainsFold predicate on the "video_codec" field.
func VideoCodecContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldVideoCodec, v))
}

// AbrEQ applies the EQ predicate on the "abr" field.
func AbrEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldAbr, v))
}

// AbrNEQ applies the NEQ predicate on the "abr" field.
func AbrNEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldAbr, v))
}

// AbrIn applies the In predicate on the "abr" field.
func AbrIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldAbr, vs...))
}

// AbrNotIn applies the NotIn predicate on the "abr" field.
func AbrNotIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldAbr, vs...))
}

// AbrGT applies the GT predicate on the "abr" field.
func AbrGT(v float64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldAbr, v))
}

// AbrGTE applies the GTE predicate on the "abr" field.
func AbrGTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldAbr, v))
}

// AbrLT applies the LT predicate on the "abr" field.
func AbrLT(v float64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldAbr, v))
}

// AbrLTE applies the LTE predicate on the "abr" field.
func AbrLTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldAbr, v))
}

// AbrIsNil applies the IsNil predicate on the "abr" field.
func AbrIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldAbr))
}

// AbrNotNil applies the NotNil predicate on the "abr" field.
func AbrNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldAbr))
}

// VbrEQ applies the EQ predicate on the "vbr" field.
func VbrEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVbr, v))
}

// VbrNEQ applies the NEQ predicate on the "vbr" field.
func VbrNEQ(v float64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldVbr, v))
}

// VbrIn applies the In predicate on the "vbr" field.
func VbrIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldVbr, vs...))
}

// VbrNotIn applies the NotIn predicate on the "vbr" field.
func VbrNotIn(vs ...float64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldVbr, vs...))
}

// VbrGT applies the GT predicate on the "vbr" field.
func VbrGT(v float64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldVbr, v))
}

// VbrGTE applies the GTE predicate on the "vbr" field.
func VbrGTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldVbr, v))
}

// VbrLT applies the LT predicate on the "vbr" field.
func VbrLT(v float64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldVbr, v))
}

// VbrLTE applies the LTE predicate on the "vbr" field.
func VbrLTE(v float64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldVbr, v))
}

// VbrIsNil applies the IsNil predicate on the "vbr" field.
func VbrIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldVbr))
}

// VbrNotNil applies the NotNil predicate on the "vbr" field.
func VbrNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldVbr))
}

// EpochEQ applies the EQ predicate on the "epoch" field.
func EpochEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldEpoch, v))
}

// EpochNEQ applies the NEQ predicate on the "epoch" field.
func EpochNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldEpoch, v))
}

// EpochIn applies the In predicate on the "epoch" field.
func EpochIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldEpoch, vs...))
}

// EpochNotIn applies the NotIn predicate on the "epoch" field.
func EpochNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldEpoch, vs...))
}

// EpochGT applies the GT predicate on the "epoch" field.
func EpochGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldEpoch, v))
}

// EpochGTE applies the GTE predicate on the "epoch" field.
func EpochGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldEpoch, v))
}

// EpochLT applies the LT predicate on the "epoch" field.
func EpochLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldEpoch, v))
}

// EpochLTE applies the LTE predicate on the "epoch" field.
func EpochLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldEpoch, v))
}

// EpochIsNil applies the IsNil predicate on the "epoch" field.
func EpochIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldEpoch))
}

// EpochNotNil applies the NotNil predicate on the "epoch" field.
func EpochNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldEpoch))
}

// CommentCountEQ applies the EQ predicate on the "comment_count" field.
func CommentCountEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCommentCount, v))
}

// CommentCountNEQ applies the NEQ predicate on the "comment_count" field.
func CommentCountNEQ(v int64) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCommentCount, v))
}

// CommentCountIn applies the In predicate on the "comment_count" field.
func CommentCountIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCommentCount, vs...))
}

// CommentCountNotIn applies the NotIn predicate on the "comment_count" field.
func CommentCountNotIn(vs ...int64) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCommentCount, vs...))
}

// CommentCountGT applies the GT predicate on the "comment_count" field.
func CommentCountGT(v int64) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCommentCount, v))
}

// CommentCountGTE applies the GTE predicate on the "comment_count" field.
func CommentCountGTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCommentCount, v))
}

// CommentCountLT applies the LT predicate on the "comment_count" field.
func CommentCountLT(v int64) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCommentCount, v))
}

// CommentCountLTE applies the LTE predicate on the "comment_count" field.
func CommentCountLTE(v int64) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCommentCount, v))
}

// CommentCountIsNil applies the IsNil predicate on the "comment_count" field.
func CommentCountIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldCommentCount))
}

// CommentCountNotNil applies the NotNil predicate on the "comment_count" field.
func CommentCountNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldCommentCount))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldTags, v))
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldTags, v))
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldTags, v))
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldTags, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldTags))
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldTags, v))
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldTags, v))
}

// CategoriesEQ applies the EQ predicate on the "categories" field.
func CategoriesEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCategories, v))
}

// CategoriesNEQ applies the NEQ predicate on the "categories" field.
func CategoriesNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCategories, v))
}

// CategoriesIn applies the In predicate on the "categories" field.
func CategoriesIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCategories, vs...))
}

// CategoriesNotIn applies the NotIn predicate on the "categories" field.
func CategoriesNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCategories, vs...))
}

// CategoriesGT applies the GT predicate on the "categories" field.
func CategoriesGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCategories, v))
}

// CategoriesGTE applies the GTE predicate on the "categories" field.
func CategoriesGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCategories, v))
}

// CategoriesLT applies the LT predicate on the "categories" field.
func CategoriesLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCategories, v))
}

// CategoriesLTE applies the LTE predicate on the "categories" field.
func CategoriesLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCategories, v))
}

// CategoriesContains applies the Contains predicate on the "categories" field.
func CategoriesContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldCategories, v))
}

// CategoriesHasPrefix applies the HasPrefix predicate on the "categories" field.
func CategoriesHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldCategories, v))
}

// CategoriesHasSuffix applies the HasSuffix predicate on the "categories" field.
func CategoriesHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldCategories, v))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldCategories))
}

// CategoriesEqualFold applies the EqualFold predicate on the "categories" field.
func CategoriesEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldCategories, v))
}

// CategoriesContainsFold applies the ContainsFold predicate on the "categories" field.
func CategoriesContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldCategories, v))
}

// VideoPathEQ applies the EQ predicate on the "video_path" field.
func VideoPathEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldVideoPath, v))
}

// VideoPathNEQ applies the NEQ predicate on the "video_path" field.
func VideoPathNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldVideoPath, v))
}

// VideoPathIn applies the In predicate on the "video_path" field.
func VideoPathIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldVideoPath, vs...))
}

// VideoPathNotIn applies the NotIn predicate on the "video_path" field.
func VideoPathNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldVideoPath, vs...))
}

// VideoPathGT applies the GT predicate on the "video_path" field.
func VideoPathGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldVideoPath, v))
}

// VideoPathGTE applies the GTE predicate on the "video_path" field.
func VideoPathGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldVideoPath, v))
}

// VideoPathLT applies the LT predicate on the "video_path" field.
func VideoPathLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldVideoPath, v))
}

// VideoPathLTE applies the LTE predicate on the "video_path" field.
func VideoPathLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldVideoPath, v))
}

// VideoPathContains applies the Contains predicate on the "video_path" field.
func VideoPathContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldVideoPath, v))
}

// VideoPathHasPrefix applies the HasPrefix predicate on the "video_path" field.
func VideoPathHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldVideoPath, v))
}

// VideoPathHasSuffix applies the HasSuffix predicate on the "video_path" field.
func VideoPathHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldVideoPath, v))
}

// VideoPathEqualFold applies the EqualFold predicate on the "video_path" field.
func VideoPathEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldVideoPath, v))
}

// VideoPathContainsFold applies the ContainsFold predicate on the "video_path" field.
func VideoPathContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldVideoPath, v))
}

// ThumbnailPathEQ applies the EQ predicate on the "thumbnail_path" field.
func ThumbnailPathEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldThumbnailPath, v))
}

// ThumbnailPathNEQ applies the NEQ predicate on the "thumbnail_path" field.
func ThumbnailPathNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldThumbnailPath, v))
}

// ThumbnailPathIn applies the In predicate on the "thumbnail_path" field.
func ThumbnailPathIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldThumbnailPath, vs...))
}

// ThumbnailPathNotIn applies the NotIn predicate on the "thumbnail_path" field.
func ThumbnailPathNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldThumbnailPath, vs...))
}

// ThumbnailPathGT applies the GT predicate on the "thumbnail_path" field.
func ThumbnailPathGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldThumbnailPath, v))
}

// ThumbnailPathGTE applies the GTE predicate on the "thumbnail_path" field.
func ThumbnailPathGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldThumbnailPath, v))
}

// ThumbnailPathLT applies the LT predicate on the "thumbnail_path" field.
func ThumbnailPathLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldThumbnailPath, v))
}

// ThumbnailPathLTE applies the LTE predicate on the "thumbnail_path" field.
func ThumbnailPathLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldThumbnailPath, v))
}

// ThumbnailPathContains applies the Contains predicate on the "thumbnail_path" field.
func ThumbnailPathContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldThumbnailPath, v))
}

// ThumbnailPathHasPrefix applies the HasPrefix predicate on the "thumbnail_path" field.
func ThumbnailPathHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldThumbnailPath, v))
}

// ThumbnailPathHasSuffix applies the HasSuffix predicate on the "thumbnail_path" field.
func ThumbnailPathHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldThumbnailPath, v))
}

// ThumbnailPathEqualFold applies the EqualFold predicate on the "thumbnail_path" field.
func ThumbnailPathEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldThumbnailPath, v))
}

// ThumbnailPathContainsFold applies the ContainsFold predicate on the "thumbnail_path" field.
func ThumbnailPathContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldThumbnailPath, v))
}

// JSONPathEQ applies the EQ predicate on the "json_path" field.
func JSONPathEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldJSONPath, v))
}

// JSONPathNEQ applies the NEQ predicate on the "json_path" field.
func JSONPathNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldJSONPath, v))
}

// JSONPathIn applies the In predicate on the "json_path" field.
func JSONPathIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldJSONPath, vs...))
}

// JSONPathNotIn applies the NotIn predicate on the "json_path" field.
func JSONPathNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldJSONPath, vs...))
}

// JSONPathGT applies the GT predicate on the "json_path" field.
func JSONPathGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldJSONPath, v))
}

// JSONPathGTE applies the GTE predicate on the "json_path" field.
func JSONPathGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldJSONPath, v))
}

// JSONPathLT applies the LT predicate on the "json_path" field.
func JSONPathLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldJSONPath, v))
}

// JSONPathLTE applies the LTE predicate on the "json_path" field.
func JSONPathLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldJSONPath, v))
}

// JSONPathContains applies the Contains predicate on the "json_path" field.
func JSONPathContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldJSONPath, v))
}

// JSONPathHasPrefix applies the HasPrefix predicate on the "json_path" field.
func JSONPathHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldJSONPath, v))
}

// JSONPathHasSuffix applies the HasSuffix predicate on the "json_path" field.
func JSONPathHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldJSONPath, v))
}

// JSONPathEqualFold applies the EqualFold predicate on the "json_path" field.
func JSONPathEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldJSONPath, v))
}

// JSONPathContainsFold applies the ContainsFold predicate on the "json_path" field.
func JSONPathContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldJSONPath, v))
}

// CaptionPathEQ applies the EQ predicate on the "caption_path" field.
func CaptionPathEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCaptionPath, v))
}

// CaptionPathNEQ applies the NEQ predicate on the "caption_path" field.
func CaptionPathNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCaptionPath, v))
}

// CaptionPathIn applies the In predicate on the "caption_path" field.
func CaptionPathIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCaptionPath, vs...))
}

// CaptionPathNotIn applies the NotIn predicate on the "caption_path" field.
func CaptionPathNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCaptionPath, vs...))
}

// CaptionPathGT applies the GT predicate on the "caption_path" field.
func CaptionPathGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCaptionPath, v))
}

// CaptionPathGTE applies the GTE predicate on the "caption_path" field.
func CaptionPathGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCaptionPath, v))
}

// CaptionPathLT applies the LT predicate on the "caption_path" field.
func CaptionPathLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCaptionPath, v))
}

// CaptionPathLTE applies the LTE predicate on the "caption_path" field.
func CaptionPathLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCaptionPath, v))
}

// CaptionPathContains applies the Contains predicate on the "caption_path" field.
func CaptionPathContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldCaptionPath, v))
}

// CaptionPathHasPrefix applies the HasPrefix predicate on the "caption_path" field.
func CaptionPathHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldCaptionPath, v))
}

// CaptionPathHasSuffix applies the HasSuffix predicate on the "caption_path" field.
func CaptionPathHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldCaptionPath, v))
}

// CaptionPathIsNil applies the IsNil predicate on the "caption_path" field.
func CaptionPathIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldCaptionPath))
}

// CaptionPathNotNil applies the NotNil predicate on the "caption_path" field.
func CaptionPathNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldCaptionPath))
}

// CaptionPathEqualFold applies the EqualFold predicate on the "caption_path" field.
func CaptionPathEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldCaptionPath, v))
}

// CaptionPathContainsFold applies the ContainsFold predicate on the "caption_path" field.
func CaptionPathContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldCaptionPath, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Channel) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChapters applies the HasEdge predicate on the "chapters" edge.
func HasChapters() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.Chapter) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaptersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Video) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		p(s.Not())
	})
}
