// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zibbp/eos/ent/channel"
	"github.com/zibbp/eos/ent/video"
)

// Video is the model entity for the Video schema.
type Video struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// UploadDate holds the value of the "upload_date" field.
	UploadDate time.Time `json:"upload_date,omitempty"`
	// Uploader holds the value of the "uploader" field.
	Uploader string `json:"uploader,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int64 `json:"duration,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int64 `json:"view_count,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int64 `json:"like_count,omitempty"`
	// DislikeCount holds the value of the "dislike_count" field.
	DislikeCount int64 `json:"dislike_count,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// Width holds the value of the "width" field.
	Width int64 `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int64 `json:"height,omitempty"`
	// Resolution holds the value of the "resolution" field.
	Resolution string `json:"resolution,omitempty"`
	// Fps holds the value of the "fps" field.
	Fps float64 `json:"fps,omitempty"`
	// AudioCodec holds the value of the "audio_codec" field.
	AudioCodec string `json:"audio_codec,omitempty"`
	// VideoCodec holds the value of the "video_codec" field.
	VideoCodec string `json:"video_codec,omitempty"`
	// Abr holds the value of the "abr" field.
	Abr float64 `json:"abr,omitempty"`
	// Vbr holds the value of the "vbr" field.
	Vbr float64 `json:"vbr,omitempty"`
	// Epoch holds the value of the "epoch" field.
	Epoch int64 `json:"epoch,omitempty"`
	// CommentCount holds the value of the "comment_count" field.
	CommentCount int64 `json:"comment_count,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories string `json:"categories,omitempty"`
	// VideoPath holds the value of the "video_path" field.
	VideoPath string `json:"video_path,omitempty"`
	// ThumbnailPath holds the value of the "thumbnail_path" field.
	ThumbnailPath string `json:"thumbnail_path,omitempty"`
	// JSONPath holds the value of the "json_path" field.
	JSONPath string `json:"json_path,omitempty"`
	// CaptionPath holds the value of the "caption_path" field.
	CaptionPath string `json:"caption_path,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuery when eager-loading is set.
	Edges          VideoEdges `json:"edges"`
	channel_videos *string
}

// VideoEdges holds the relations/edges for other nodes in the graph.
type VideoEdges struct {
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// Chapters holds the value of the chapters edge.
	Chapters []*Chapter `json:"chapters,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[0] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// ChaptersOrErr returns the Chapters value or an error if the edge
// was not loaded in eager-loading.
func (e VideoEdges) ChaptersOrErr() ([]*Chapter, error) {
	if e.loadedTypes[1] {
		return e.Chapters, nil
	}
	return nil, &NotLoadedError{edge: "chapters"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e VideoEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case video.FieldFps, video.FieldAbr, video.FieldVbr:
			values[i] = new(sql.NullFloat64)
		case video.FieldDuration, video.FieldViewCount, video.FieldLikeCount, video.FieldDislikeCount, video.FieldWidth, video.FieldHeight, video.FieldEpoch, video.FieldCommentCount:
			values[i] = new(sql.NullInt64)
		case video.FieldID, video.FieldTitle, video.FieldDescription, video.FieldUploader, video.FieldFormat, video.FieldResolution, video.FieldAudioCodec, video.FieldVideoCodec, video.FieldTags, video.FieldCategories, video.FieldVideoPath, video.FieldThumbnailPath, video.FieldJSONPath, video.FieldCaptionPath, video.FieldPath:
			values[i] = new(sql.NullString)
		case video.FieldUploadDate, video.FieldCreatedAt, video.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case video.ForeignKeys[0]: // channel_videos
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Video", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video fields.
func (v *Video) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case video.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case video.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case video.FieldUploadDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field upload_date", values[i])
			} else if value.Valid {
				v.UploadDate = value.Time
			}
		case video.FieldUploader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uploader", values[i])
			} else if value.Valid {
				v.Uploader = value.String
			}
		case video.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				v.Duration = value.Int64
			}
		case video.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				v.ViewCount = value.Int64
			}
		case video.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				v.LikeCount = value.Int64
			}
		case video.FieldDislikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dislike_count", values[i])
			} else if value.Valid {
				v.DislikeCount = value.Int64
			}
		case video.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				v.Format = value.String
			}
		case video.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				v.Width = value.Int64
			}
		case video.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				v.Height = value.Int64
			}
		case video.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				v.Resolution = value.String
			}
		case video.FieldFps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fps", values[i])
			} else if value.Valid {
				v.Fps = value.Float64
			}
		case video.FieldAudioCodec:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio_codec", values[i])
			} else if value.Valid {
				v.AudioCodec = value.String
			}
		case video.FieldVideoCodec:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_codec", values[i])
			} else if value.Valid {
				v.VideoCodec = value.String
			}
		case video.FieldAbr:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field abr", values[i])
			} else if value.Valid {
				v.Abr = value.Float64
			}
		case video.FieldVbr:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vbr", values[i])
			} else if value.Valid {
				v.Vbr = value.Float64
			}
		case video.FieldEpoch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field epoch", values[i])
			} else if value.Valid {
				v.Epoch = value.Int64
			}
		case video.FieldCommentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_count", values[i])
			} else if value.Valid {
				v.CommentCount = value.Int64
			}
		case video.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				v.Tags = value.String
			}
		case video.FieldCategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value.Valid {
				v.Categories = value.String
			}
		case video.FieldVideoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_path", values[i])
			} else if value.Valid {
				v.VideoPath = value.String
			}
		case video.FieldThumbnailPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_path", values[i])
			} else if value.Valid {
				v.ThumbnailPath = value.String
			}
		case video.FieldJSONPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field json_path", values[i])
			} else if value.Valid {
				v.JSONPath = value.String
			}
		case video.FieldCaptionPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caption_path", values[i])
			} else if value.Valid {
				v.CaptionPath = value.String
			}
		case video.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				v.Path = value.String
			}
		case video.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case video.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case video.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_videos", values[i])
			} else if value.Valid {
				v.channel_videos = new(string)
				*v.channel_videos = value.String
			}
		}
	}
	return nil
}

// QueryChannel queries the "channel" edge of the Video entity.
func (v *Video) QueryChannel() *ChannelQuery {
	return (&VideoClient{config: v.config}).QueryChannel(v)
}

// QueryChapters queries the "chapters" edge of the Video entity.
func (v *Video) QueryChapters() *ChapterQuery {
	return (&VideoClient{config: v.config}).QueryChapters(v)
}

// QueryComments queries the "comments" edge of the Video entity.
func (v *Video) QueryComments() *CommentQuery {
	return (&VideoClient{config: v.config}).QueryComments(v)
}

// Update returns a builder for updating this Video.
// Note that you need to call Video.Unwrap() before calling this method if this Video
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Video) Update() *VideoUpdateOne {
	return (&VideoClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Video entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Video) Unwrap() *Video {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Video) String() string {
	var builder strings.Builder
	builder.WriteString("Video(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("title=")
	builder.WriteString(v.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("upload_date=")
	builder.WriteString(v.UploadDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uploader=")
	builder.WriteString(v.Uploader)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", v.Duration))
	builder.WriteString(", ")
	builder.WriteString("view_count=")
	builder.WriteString(fmt.Sprintf("%v", v.ViewCount))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", v.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("dislike_count=")
	builder.WriteString(fmt.Sprintf("%v", v.DislikeCount))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(v.Format)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", v.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", v.Height))
	builder.WriteString(", ")
	builder.WriteString("resolution=")
	builder.WriteString(v.Resolution)
	builder.WriteString(", ")
	builder.WriteString("fps=")
	builder.WriteString(fmt.Sprintf("%v", v.Fps))
	builder.WriteString(", ")
	builder.WriteString("audio_codec=")
	builder.WriteString(v.AudioCodec)
	builder.WriteString(", ")
	builder.WriteString("video_codec=")
	builder.WriteString(v.VideoCodec)
	builder.WriteString(", ")
	builder.WriteString("abr=")
	builder.WriteString(fmt.Sprintf("%v", v.Abr))
	builder.WriteString(", ")
	builder.WriteString("vbr=")
	builder.WriteString(fmt.Sprintf("%v", v.Vbr))
	builder.WriteString(", ")
	builder.WriteString("epoch=")
	builder.WriteString(fmt.Sprintf("%v", v.Epoch))
	builder.WriteString(", ")
	builder.WriteString("comment_count=")
	builder.WriteString(fmt.Sprintf("%v", v.CommentCount))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(v.Tags)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(v.Categories)
	builder.WriteString(", ")
	builder.WriteString("video_path=")
	builder.WriteString(v.VideoPath)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_path=")
	builder.WriteString(v.ThumbnailPath)
	builder.WriteString(", ")
	builder.WriteString("json_path=")
	builder.WriteString(v.JSONPath)
	builder.WriteString(", ")
	builder.WriteString("caption_path=")
	builder.WriteString(v.CaptionPath)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(v.Path)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Videos is a parsable slice of Video.
type Videos []*Video

func (v Videos) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
