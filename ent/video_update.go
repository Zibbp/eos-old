// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/eos/ent/channel"
	"github.com/zibbp/eos/ent/chapter"
	"github.com/zibbp/eos/ent/comment"
	"github.com/zibbp/eos/ent/predicate"
	"github.com/zibbp/eos/ent/video"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// Where appends a list predicates to the VideoUpdate builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VideoUpdate) SetTitle(s string) *VideoUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetDescription sets the "description" field.
func (vu *VideoUpdate) SetDescription(s string) *VideoUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDescription(s *string) *VideoUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VideoUpdate) ClearDescription() *VideoUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetUploadDate sets the "upload_date" field.
func (vu *VideoUpdate) SetUploadDate(t time.Time) *VideoUpdate {
	vu.mutation.SetUploadDate(t)
	return vu
}

// SetUploader sets the "uploader" field.
func (vu *VideoUpdate) SetUploader(s string) *VideoUpdate {
	vu.mutation.SetUploader(s)
	return vu
}

// SetDuration sets the "duration" field.
func (vu *VideoUpdate) SetDuration(i int64) *VideoUpdate {
	vu.mutation.ResetDuration()
	vu.mutation.SetDuration(i)
	return vu
}

// AddDuration adds i to the "duration" field.
func (vu *VideoUpdate) AddDuration(i int64) *VideoUpdate {
	vu.mutation.AddDuration(i)
	return vu
}

// SetViewCount sets the "view_count" field.
func (vu *VideoUpdate) SetViewCount(i int64) *VideoUpdate {
	vu.mutation.ResetViewCount()
	vu.mutation.SetViewCount(i)
	return vu
}

// AddViewCount adds i to the "view_count" field.
func (vu *VideoUpdate) AddViewCount(i int64) *VideoUpdate {
	vu.mutation.AddViewCount(i)
	return vu
}

// SetLikeCount sets the "like_count" field.
func (vu *VideoUpdate) SetLikeCount(i int64) *VideoUpdate {
	vu.mutation.ResetLikeCount()
	vu.mutation.SetLikeCount(i)
	return vu
}

// AddLikeCount adds i to the "like_count" field.
func (vu *VideoUpdate) AddLikeCount(i int64) *VideoUpdate {
	vu.mutation.AddLikeCount(i)
	return vu
}

// SetDislikeCount sets the "dislike_count" field.
func (vu *VideoUpdate) SetDislikeCount(i int64) *VideoUpdate {
	vu.mutation.ResetDislikeCount()
	vu.mutation.SetDislikeCount(i)
	return vu
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDislikeCount(i *int64) *VideoUpdate {
	if i != nil {
		vu.SetDislikeCount(*i)
	}
	return vu
}

// AddDislikeCount adds i to the "dislike_count" field.
func (vu *VideoUpdate) AddDislikeCount(i int64) *VideoUpdate {
	vu.mutation.AddDislikeCount(i)
	return vu
}

// ClearDislikeCount clears the value of the "dislike_count" field.
func (vu *VideoUpdate) ClearDislikeCount() *VideoUpdate {
	vu.mutation.ClearDislikeCount()
	return vu
}

// SetFormat sets the "format" field.
func (vu *VideoUpdate) SetFormat(s string) *VideoUpdate {
	vu.mutation.SetFormat(s)
	return vu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableFormat(s *string) *VideoUpdate {
	if s != nil {
		vu.SetFormat(*s)
	}
	return vu
}

// ClearFormat clears the value of the "format" field.
func (vu *VideoUpdate) ClearFormat() *VideoUpdate {
	vu.mutation.ClearFormat()
	return vu
}

// SetWidth sets the "width" field.
func (vu *VideoUpdate) SetWidth(i int64) *VideoUpdate {
	vu.mutation.ResetWidth()
	vu.mutation.SetWidth(i)
	return vu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableWidth(i *int64) *VideoUpdate {
	if i != nil {
		vu.SetWidth(*i)
	}
	return vu
}

// AddWidth adds i to the "width" field.
func (vu *VideoUpdate) AddWidth(i int64) *VideoUpdate {
	vu.mutation.AddWidth(i)
	return vu
}

// ClearWidth clears the value of the "width" field.
func (vu *VideoUpdate) ClearWidth() *VideoUpdate {
	vu.mutation.ClearWidth()
	return vu
}

// SetHeight sets the "height" field.
func (vu *VideoUpdate) SetHeight(i int64) *VideoUpdate {
	vu.mutation.ResetHeight()
	vu.mutation.SetHeight(i)
	return vu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableHeight(i *int64) *VideoUpdate {
	if i != nil {
		vu.SetHeight(*i)
	}
	return vu
}

// AddHeight adds i to the "height" field.
func (vu *VideoUpdate) AddHeight(i int64) *VideoUpdate {
	vu.mutation.AddHeight(i)
	return vu
}

// ClearHeight clears the value of the "height" field.
func (vu *VideoUpdate) ClearHeight() *VideoUpdate {
	vu.mutation.ClearHeight()
	return vu
}

// SetResolution sets the "resolution" field.
func (vu *VideoUpdate) SetResolution(s string) *VideoUpdate {
	vu.mutation.SetResolution(s)
	return vu
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableResolution(s *string) *VideoUpdate {
	if s != nil {
		vu.SetResolution(*s)
	}
	return vu
}

// ClearResolution clears the value of the "resolution" field.
func (vu *VideoUpdate) ClearResolution() *VideoUpdate {
	vu.mutation.ClearResolution()
	return vu
}

// SetFps sets the "fps" field.
func (vu *VideoUpdate) SetFps(f float64) *VideoUpdate {
	vu.mutation.ResetFps()
	vu.mutation.SetFps(f)
	return vu
}

// SetNillableFps sets the "fps" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableFps(f *float64) *VideoUpdate {
	if f != nil {
		vu.SetFps(*f)
	}
	return vu
}

// AddFps adds f to the "fps" field.
func (vu *VideoUpdate) AddFps(f float64) *VideoUpdate {
	vu.mutation.AddFps(f)
	return vu
}

// ClearFps clears the value of the "fps" field.
func (vu *VideoUpdate) ClearFps() *VideoUpdate {
	vu.mutation.ClearFps()
	return vu
}

// SetAudioCodec sets the "audio_codec" field.
func (vu *VideoUpdate) SetAudioCodec(s string) *VideoUpdate {
	vu.mutation.SetAudioCodec(s)
	return vu
}

// SetNillableAudioCodec sets the "audio_codec" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableAudioCodec(s *string) *VideoUpdate {
	if s != nil {
		vu.SetAudioCodec(*s)
	}
	return vu
}

// ClearAudioCodec clears the value of the "audio_codec" field.
func (vu *VideoUpdate) ClearAudioCodec() *VideoUpdate {
	vu.mutation.ClearAudioCodec()
	return vu
}

// SetVideoCodec sets the "video_codec" field.
func (vu *VideoUpdate) SetVideoCodec(s string) *VideoUpdate {
	vu.mutation.SetVideoCodec(s)
	return vu
}

// SetNillableVideoCodec sets the "video_codec" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableVideoCodec(s *string) *VideoUpdate {
	if s != nil {
		vu.SetVideoCodec(*s)
	}
	return vu
}

// ClearVideoCodec clears the value of the "video_codec" field.
func (vu *VideoUpdate) ClearVideoCodec() *VideoUpdate {
	vu.mutation.ClearVideoCodec()
	return vu
}

// SetAbr sets the "abr" field.
func (vu *VideoUpdate) SetAbr(f float64) *VideoUpdate {
	vu.mutation.ResetAbr()
	vu.mutation.SetAbr(f)
	return vu
}

// SetNillableAbr sets the "abr" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableAbr(f *float64) *VideoUpdate {
	if f != nil {
		vu.SetAbr(*f)
	}
	return vu
}

// AddAbr adds f to the "abr" field.
func (vu *VideoUpdate) AddAbr(f float64) *VideoUpdate {
	vu.mutation.AddAbr(f)
	return vu
}

// ClearAbr clears the value of the "abr" field.
func (vu *VideoUpdate) ClearAbr() *VideoUpdate {
	vu.mutation.ClearAbr()
	return vu
}

// SetVbr sets the "vbr" field.
func (vu *VideoUpdate) SetVbr(f float64) *VideoUpdate {
	vu.mutation.ResetVbr()
	vu.mutation.SetVbr(f)
	return vu
}

// SetNillableVbr sets the "vbr" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableVbr(f *float64) *VideoUpdate {
	if f != nil {
		vu.SetVbr(*f)
	}
	return vu
}

// AddVbr adds f to the "vbr" field.
func (vu *VideoUpdate) AddVbr(f float64) *VideoUpdate {
	vu.mutation.AddVbr(f)
	return vu
}

// ClearVbr clears the value of the "vbr" field.
func (vu *VideoUpdate) ClearVbr() *VideoUpdate {
	vu.mutation.ClearVbr()
	return vu
}

// SetEpoch sets the "epoch" field.
func (vu *VideoUpdate) SetEpoch(i int64) *VideoUpdate {
	vu.mutation.ResetEpoch()
	vu.mutation.SetEpoch(i)
	return vu
}

// SetNillableEpoch sets the "epoch" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableEpoch(i *int64) *VideoUpdate {
	if i != nil {
		vu.SetEpoch(*i)
	}
	return vu
}

// AddEpoch adds i to the "epoch" field.
func (vu *VideoUpdate) AddEpoch(i int64) *VideoUpdate {
	vu.mutation.AddEpoch(i)
	return vu
}

// ClearEpoch clears the value of the "epoch" field.
func (vu *VideoUpdate) ClearEpoch() *VideoUpdate {
	vu.mutation.ClearEpoch()
	return vu
}

// SetCommentCount sets the "comment_count" field.
func (vu *VideoUpdate) SetCommentCount(i int64) *VideoUpdate {
	vu.mutation.ResetCommentCount()
	vu.mutation.SetCommentCount(i)
	return vu
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCommentCount(i *int64) *VideoUpdate {
	if i != nil {
		vu.SetCommentCount(*i)
	}
	return vu
}

// AddCommentCount adds i to the "comment_count" field.
func (vu *VideoUpdate) AddCommentCount(i int64) *VideoUpdate {
	vu.mutation.AddCommentCount(i)
	return vu
}

// ClearCommentCount clears the value of the "comment_count" field.
func (vu *VideoUpdate) ClearCommentCount() *VideoUpdate {
	vu.mutation.ClearCommentCount()
	return vu
}

// SetTags sets the "tags" field.
func (vu *VideoUpdate) SetTags(s string) *VideoUpdate {
	vu.mutation.SetTags(s)
	return vu
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableTags(s *string) *VideoUpdate {
	if s != nil {
		vu.SetTags(*s)
	}
	return vu
}

// ClearTags clears the value of the "tags" field.
func (vu *VideoUpdate) ClearTags() *VideoUpdate {
	vu.mutation.ClearTags()
	return vu
}

// SetCategories sets the "categories" field.
func (vu *VideoUpdate) SetCategories(s string) *VideoUpdate {
	vu.mutation.SetCategories(s)
	return vu
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCategories(s *string) *VideoUpdate {
	if s != nil {
		vu.SetCategories(*s)
	}
	return vu
}

// ClearCategories clears the value of the "categories" field.
func (vu *VideoUpdate) ClearCategories() *VideoUpdate {
	vu.mutation.ClearCategories()
	return vu
}

// SetVideoPath sets the "video_path" field.
func (vu *VideoUpdate) SetVideoPath(s string) *VideoUpdate {
	vu.mutation.SetVideoPath(s)
	return vu
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (vu *VideoUpdate) SetThumbnailPath(s string) *VideoUpdate {
	vu.mutation.SetThumbnailPath(s)
	return vu
}

// SetJSONPath sets the "json_path" field.
func (vu *VideoUpdate) SetJSONPath(s string) *VideoUpdate {
	vu.mutation.SetJSONPath(s)
	return vu
}

// SetCaptionPath sets the "caption_path" field.
func (vu *VideoUpdate) SetCaptionPath(s string) *VideoUpdate {
	vu.mutation.SetCaptionPath(s)
	return vu
}

// SetNillableCaptionPath sets the "caption_path" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCaptionPath(s *string) *VideoUpdate {
	if s != nil {
		vu.SetCaptionPath(*s)
	}
	return vu
}

// ClearCaptionPath clears the value of the "caption_path" field.
func (vu *VideoUpdate) ClearCaptionPath() *VideoUpdate {
	vu.mutation.ClearCaptionPath()
	return vu
}

// SetPath sets the "path" field.
func (vu *VideoUpdate) SetPath(s string) *VideoUpdate {
	vu.mutation.SetPath(s)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VideoUpdate) SetUpdatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (vu *VideoUpdate) SetChannelID(id string) *VideoUpdate {
	vu.mutation.SetChannelID(id)
	return vu
}

// SetChannel sets the "channel" edge to the Channel entity.
func (vu *VideoUpdate) SetChannel(c *Channel) *VideoUpdate {
	return vu.SetChannelID(c.ID)
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (vu *VideoUpdate) AddChapterIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddChapterIDs(ids...)
	return vu
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (vu *VideoUpdate) AddChapters(c ...*Chapter) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddChapterIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (vu *VideoUpdate) AddCommentIDs(ids ...string) *VideoUpdate {
	vu.mutation.AddCommentIDs(ids...)
	return vu
}

// AddComments adds the "comments" edges to the Comment entity.
func (vu *VideoUpdate) AddComments(c ...*Comment) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddCommentIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (vu *VideoUpdate) ClearChannel() *VideoUpdate {
	vu.mutation.ClearChannel()
	return vu
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (vu *VideoUpdate) ClearChapters() *VideoUpdate {
	vu.mutation.ClearChapters()
	return vu
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (vu *VideoUpdate) RemoveChapterIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveChapterIDs(ids...)
	return vu
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (vu *VideoUpdate) RemoveChapters(c ...*Chapter) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveChapterIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (vu *VideoUpdate) ClearComments() *VideoUpdate {
	vu.mutation.ClearComments()
	return vu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (vu *VideoUpdate) RemoveCommentIDs(ids ...string) *VideoUpdate {
	vu.mutation.RemoveCommentIDs(ids...)
	return vu
}

// RemoveComments removes "comments" edges to Comment entities.
func (vu *VideoUpdate) RemoveComments(c ...*Comment) *VideoUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks[int, VideoMutation](ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VideoUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := video.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VideoUpdate) check() error {
	if _, ok := vu.mutation.ChannelID(); vu.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Video.channel"`)
	}
	return nil
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: video.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(video.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(video.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.UploadDate(); ok {
		_spec.SetField(video.FieldUploadDate, field.TypeTime, value)
	}
	if value, ok := vu.mutation.Uploader(); ok {
		_spec.SetField(video.FieldUploader, field.TypeString, value)
	}
	if value, ok := vu.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.ViewCount(); ok {
		_spec.SetField(video.FieldViewCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedViewCount(); ok {
		_spec.AddField(video.FieldViewCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.LikeCount(); ok {
		_spec.SetField(video.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedLikeCount(); ok {
		_spec.AddField(video.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.DislikeCount(); ok {
		_spec.SetField(video.FieldDislikeCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedDislikeCount(); ok {
		_spec.AddField(video.FieldDislikeCount, field.TypeInt64, value)
	}
	if vu.mutation.DislikeCountCleared() {
		_spec.ClearField(video.FieldDislikeCount, field.TypeInt64)
	}
	if value, ok := vu.mutation.Format(); ok {
		_spec.SetField(video.FieldFormat, field.TypeString, value)
	}
	if vu.mutation.FormatCleared() {
		_spec.ClearField(video.FieldFormat, field.TypeString)
	}
	if value, ok := vu.mutation.Width(); ok {
		_spec.SetField(video.FieldWidth, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedWidth(); ok {
		_spec.AddField(video.FieldWidth, field.TypeInt64, value)
	}
	if vu.mutation.WidthCleared() {
		_spec.ClearField(video.FieldWidth, field.TypeInt64)
	}
	if value, ok := vu.mutation.Height(); ok {
		_spec.SetField(video.FieldHeight, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedHeight(); ok {
		_spec.AddField(video.FieldHeight, field.TypeInt64, value)
	}
	if vu.mutation.HeightCleared() {
		_spec.ClearField(video.FieldHeight, field.TypeInt64)
	}
	if value, ok := vu.mutation.Resolution(); ok {
		_spec.SetField(video.FieldResolution, field.TypeString, value)
	}
	if vu.mutation.ResolutionCleared() {
		_spec.ClearField(video.FieldResolution, field.TypeString)
	}
	if value, ok := vu.mutation.Fps(); ok {
		_spec.SetField(video.FieldFps, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedFps(); ok {
		_spec.AddField(video.FieldFps, field.TypeFloat64, value)
	}
	if vu.mutation.FpsCleared() {
		_spec.ClearField(video.FieldFps, field.TypeFloat64)
	}
	if value, ok := vu.mutation.AudioCodec(); ok {
		_spec.SetField(video.FieldAudioCodec, field.TypeString, value)
	}
	if vu.mutation.AudioCodecCleared() {
		_spec.ClearField(video.FieldAudioCodec, field.TypeString)
	}
	if value, ok := vu.mutation.VideoCodec(); ok {
		_spec.SetField(video.FieldVideoCodec, field.TypeString, value)
	}
	if vu.mutation.VideoCodecCleared() {
		_spec.ClearField(video.FieldVideoCodec, field.TypeString)
	}
	if value, ok := vu.mutation.Abr(); ok {
		_spec.SetField(video.FieldAbr, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedAbr(); ok {
		_spec.AddField(video.FieldAbr, field.TypeFloat64, value)
	}
	if vu.mutation.AbrCleared() {
		_spec.ClearField(video.FieldAbr, field.TypeFloat64)
	}
	if value, ok := vu.mutation.Vbr(); ok {
		_spec.SetField(video.FieldVbr, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedVbr(); ok {
		_spec.AddField(video.FieldVbr, field.TypeFloat64, value)
	}
	if vu.mutation.VbrCleared() {
		_spec.ClearField(video.FieldVbr, field.TypeFloat64)
	}
	if value, ok := vu.mutation.Epoch(); ok {
		_spec.SetField(video.FieldEpoch, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedEpoch(); ok {
		_spec.AddField(video.FieldEpoch, field.TypeInt64, value)
	}
	if vu.mutation.EpochCleared() {
		_spec.ClearField(video.FieldEpoch, field.TypeInt64)
	}
	if value, ok := vu.mutation.CommentCount(); ok {
		_spec.SetField(video.FieldCommentCount, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedCommentCount(); ok {
		_spec.AddField(video.FieldCommentCount, field.TypeInt64, value)
	}
	if vu.mutation.CommentCountCleared() {
		_spec.ClearField(video.FieldCommentCount, field.TypeInt64)
	}
	if value, ok := vu.mutation.Tags(); ok {
		_spec.SetField(video.FieldTags, field.TypeString, value)
	}
	if vu.mutation.TagsCleared() {
		_spec.ClearField(video.FieldTags, field.TypeString)
	}
	if value, ok := vu.mutation.Categories(); ok {
		_spec.SetField(video.FieldCategories, field.TypeString, value)
	}
	if vu.mutation.CategoriesCleared() {
		_spec.ClearField(video.FieldCategories, field.TypeString)
	}
	if value, ok := vu.mutation.VideoPath(); ok {
		_spec.SetField(video.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := vu.mutation.ThumbnailPath(); ok {
		_spec.SetField(video.FieldThumbnailPath, field.TypeString, value)
	}
	if value, ok := vu.mutation.JSONPath(); ok {
		_spec.SetField(video.FieldJSONPath, field.TypeString, value)
	}
	if value, ok := vu.mutation.CaptionPath(); ok {
		_spec.SetField(video.FieldCaptionPath, field.TypeString, value)
	}
	if vu.mutation.CaptionPathCleared() {
		_spec.ClearField(video.FieldCaptionPath, field.TypeString)
	}
	if value, ok := vu.mutation.Path(); ok {
		_spec.SetField(video.FieldPath, field.TypeString, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.ChannelTable,
			Columns: []string{video.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.ChannelTable,
			Columns: []string{video.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !vu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !vu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMutation
}

// SetTitle sets the "title" field.
func (vuo *VideoUpdateOne) SetTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VideoUpdateOne) SetDescription(s string) *VideoUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDescription(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VideoUpdateOne) ClearDescription() *VideoUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetUploadDate sets the "upload_date" field.
func (vuo *VideoUpdateOne) SetUploadDate(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetUploadDate(t)
	return vuo
}

// SetUploader sets the "uploader" field.
func (vuo *VideoUpdateOne) SetUploader(s string) *VideoUpdateOne {
	vuo.mutation.SetUploader(s)
	return vuo
}

// SetDuration sets the "duration" field.
func (vuo *VideoUpdateOne) SetDuration(i int64) *VideoUpdateOne {
	vuo.mutation.ResetDuration()
	vuo.mutation.SetDuration(i)
	return vuo
}

// AddDuration adds i to the "duration" field.
func (vuo *VideoUpdateOne) AddDuration(i int64) *VideoUpdateOne {
	vuo.mutation.AddDuration(i)
	return vuo
}

// SetViewCount sets the "view_count" field.
func (vuo *VideoUpdateOne) SetViewCount(i int64) *VideoUpdateOne {
	vuo.mutation.ResetViewCount()
	vuo.mutation.SetViewCount(i)
	return vuo
}

// AddViewCount adds i to the "view_count" field.
func (vuo *VideoUpdateOne) AddViewCount(i int64) *VideoUpdateOne {
	vuo.mutation.AddViewCount(i)
	return vuo
}

// SetLikeCount sets the "like_count" field.
func (vuo *VideoUpdateOne) SetLikeCount(i int64) *VideoUpdateOne {
	vuo.mutation.ResetLikeCount()
	vuo.mutation.SetLikeCount(i)
	return vuo
}

// AddLikeCount adds i to the "like_count" field.
func (vuo *VideoUpdateOne) AddLikeCount(i int64) *VideoUpdateOne {
	vuo.mutation.AddLikeCount(i)
	return vuo
}

// SetDislikeCount sets the "dislike_count" field.
func (vuo *VideoUpdateOne) SetDislikeCount(i int64) *VideoUpdateOne {
	vuo.mutation.ResetDislikeCount()
	vuo.mutation.SetDislikeCount(i)
	return vuo
}

// SetNillableDislikeCount sets the "dislike_count" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDislikeCount(i *int64) *VideoUpdateOne {
	if i != nil {
		vuo.SetDislikeCount(*i)
	}
	return vuo
}

// AddDislikeCount adds i to the "dislike_count" field.
func (vuo *VideoUpdateOne) AddDislikeCount(i int64) *VideoUpdateOne {
	vuo.mutation.AddDislikeCount(i)
	return vuo
}

// ClearDislikeCount clears the value of the "dislike_count" field.
func (vuo *VideoUpdateOne) ClearDislikeCount() *VideoUpdateOne {
	vuo.mutation.ClearDislikeCount()
	return vuo
}

// SetFormat sets the "format" field.
func (vuo *VideoUpdateOne) SetFormat(s string) *VideoUpdateOne {
	vuo.mutation.SetFormat(s)
	return vuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableFormat(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetFormat(*s)
	}
	return vuo
}

// ClearFormat clears the value of the "format" field.
func (vuo *VideoUpdateOne) ClearFormat() *VideoUpdateOne {
	vuo.mutation.ClearFormat()
	return vuo
}

// SetWidth sets the "width" field.
func (vuo *VideoUpdateOne) SetWidth(i int64) *VideoUpdateOne {
	vuo.mutation.ResetWidth()
	vuo.mutation.SetWidth(i)
	return vuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableWidth(i *int64) *VideoUpdateOne {
	if i != nil {
		vuo.SetWidth(*i)
	}
	return vuo
}

// AddWidth adds i to the "width" field.
func (vuo *VideoUpdateOne) AddWidth(i int64) *VideoUpdateOne {
	vuo.mutation.AddWidth(i)
	return vuo
}

// ClearWidth clears the value of the "width" field.
func (vuo *VideoUpdateOne) ClearWidth() *VideoUpdateOne {
	vuo.mutation.ClearWidth()
	return vuo
}

// SetHeight sets the "height" field.
func (vuo *VideoUpdateOne) SetHeight(i int64) *VideoUpdateOne {
	vuo.mutation.ResetHeight()
	vuo.mutation.SetHeight(i)
	return vuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableHeight(i *int64) *VideoUpdateOne {
	if i != nil {
		vuo.SetHeight(*i)
	}
	return vuo
}

// AddHeight adds i to the "height" field.
func (vuo *VideoUpdateOne) AddHeight(i int64) *VideoUpdateOne {
	vuo.mutation.AddHeight(i)
	return vuo
}

// ClearHeight clears the value of the "height" field.
func (vuo *VideoUpdateOne) ClearHeight() *VideoUpdateOne {
	vuo.mutation.ClearHeight()
	return vuo
}

// SetResolution sets the "resolution" field.
func (vuo *VideoUpdateOne) SetResolution(s string) *VideoUpdateOne {
	vuo.mutation.SetResolution(s)
	return vuo
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableResolution(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetResolution(*s)
	}
	return vuo
}

// ClearResolution clears the value of the "resolution" field.
func (vuo *VideoUpdateOne) ClearResolution() *VideoUpdateOne {
	vuo.mutation.ClearResolution()
	return vuo
}

// SetFps sets the "fps" field.
func (vuo *VideoUpdateOne) SetFps(f float64) *VideoUpdateOne {
	vuo.mutation.ResetFps()
	vuo.mutation.SetFps(f)
	return vuo
}

// SetNillableFps sets the "fps" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableFps(f *float64) *VideoUpdateOne {
	if f != nil {
		vuo.SetFps(*f)
	}
	return vuo
}

// AddFps adds f to the "fps" field.
func (vuo *VideoUpdateOne) AddFps(f float64) *VideoUpdateOne {
	vuo.mutation.AddFps(f)
	return vuo
}

// ClearFps clears the value of the "fps" field.
func (vuo *VideoUpdateOne) ClearFps() *VideoUpdateOne {
	vuo.mutation.ClearFps()
	return vuo
}

// SetAudioCodec sets the "audio_codec" field.
func (vuo *VideoUpdateOne) SetAudioCodec(s string) *VideoUpdateOne {
	vuo.mutation.SetAudioCodec(s)
	return vuo
}

// SetNillableAudioCodec sets the "audio_codec" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableAudioCodec(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetAudioCodec(*s)
	}
	return vuo
}

// ClearAudioCodec clears the value of the "audio_codec" field.
func (vuo *VideoUpdateOne) ClearAudioCodec() *VideoUpdateOne {
	vuo.mutation.ClearAudioCodec()
	return vuo
}

// SetVideoCodec sets the "video_codec" field.
func (vuo *VideoUpdateOne) SetVideoCodec(s string) *VideoUpdateOne {
	vuo.mutation.SetVideoCodec(s)
	return vuo
}

// SetNillableVideoCodec sets the "video_codec" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableVideoCodec(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetVideoCodec(*s)
	}
	return vuo
}

// ClearVideoCodec clears the value of the "video_codec" field.
func (vuo *VideoUpdateOne) ClearVideoCodec() *VideoUpdateOne {
	vuo.mutation.ClearVideoCodec()
	return vuo
}

// SetAbr sets the "abr" field.
func (vuo *VideoUpdateOne) SetAbr(f float64) *VideoUpdateOne {
	vuo.mutation.ResetAbr()
	vuo.mutation.SetAbr(f)
	return vuo
}

// SetNillableAbr sets the "abr" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableAbr(f *float64) *VideoUpdateOne {
	if f != nil {
		vuo.SetAbr(*f)
	}
	return vuo
}

// AddAbr adds f to the "abr" field.
func (vuo *VideoUpdateOne) AddAbr(f float64) *VideoUpdateOne {
	vuo.mutation.AddAbr(f)
	return vuo
}

// ClearAbr clears the value of the "abr" field.
func (vuo *VideoUpdateOne) ClearAbr() *VideoUpdateOne {
	vuo.mutation.ClearAbr()
	return vuo
}

// SetVbr sets the "vbr" field.
func (vuo *VideoUpdateOne) SetVbr(f float64) *VideoUpdateOne {
	vuo.mutation.ResetVbr()
	vuo.mutation.SetVbr(f)
	return vuo
}

// SetNillableVbr sets the "vbr" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableVbr(f *float64) *VideoUpdateOne {
	if f != nil {
		vuo.SetVbr(*f)
	}
	return vuo
}

// AddVbr adds f to the "vbr" field.
func (vuo *VideoUpdateOne) AddVbr(f float64) *VideoUpdateOne {
	vuo.mutation.AddVbr(f)
	return vuo
}

// ClearVbr clears the value of the "vbr" field.
func (vuo *VideoUpdateOne) ClearVbr() *VideoUpdateOne {
	vuo.mutation.ClearVbr()
	return vuo
}

// SetEpoch sets the "epoch" field.
func (vuo *VideoUpdateOne) SetEpoch(i int64) *VideoUpdateOne {
	vuo.mutation.ResetEpoch()
	vuo.mutation.SetEpoch(i)
	return vuo
}

// SetNillableEpoch sets the "epoch" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableEpoch(i *int64) *VideoUpdateOne {
	if i != nil {
		vuo.SetEpoch(*i)
	}
	return vuo
}

// AddEpoch adds i to the "epoch" field.
func (vuo *VideoUpdateOne) AddEpoch(i int64) *VideoUpdateOne {
	vuo.mutation.AddEpoch(i)
	return vuo
}

// ClearEpoch clears the value of the "epoch" field.
func (vuo *VideoUpdateOne) ClearEpoch() *VideoUpdateOne {
	vuo.mutation.ClearEpoch()
	return vuo
}

// SetCommentCount sets the "comment_count" field.
func (vuo *VideoUpdateOne) SetCommentCount(i int64) *VideoUpdateOne {
	vuo.mutation.ResetCommentCount()
	vuo.mutation.SetCommentCount(i)
	return vuo
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCommentCount(i *int64) *VideoUpdateOne {
	if i != nil {
		vuo.SetCommentCount(*i)
	}
	return vuo
}

// AddCommentCount adds i to the "comment_count" field.
func (vuo *VideoUpdateOne) AddCommentCount(i int64) *VideoUpdateOne {
	vuo.mutation.AddCommentCount(i)
	return vuo
}

// ClearCommentCount clears the value of the "comment_count" field.
func (vuo *VideoUpdateOne) ClearCommentCount() *VideoUpdateOne {
	vuo.mutation.ClearCommentCount()
	return vuo
}

// SetTags sets the "tags" field.
func (vuo *VideoUpdateOne) SetTags(s string) *VideoUpdateOne {
	vuo.mutation.SetTags(s)
	return vuo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableTags(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetTags(*s)
	}
	return vuo
}

// ClearTags clears the value of the "tags" field.
func (vuo *VideoUpdateOne) ClearTags() *VideoUpdateOne {
	vuo.mutation.ClearTags()
	return vuo
}

// SetCategories sets the "categories" field.
func (vuo *VideoUpdateOne) SetCategories(s string) *VideoUpdateOne {
	vuo.mutation.SetCategories(s)
	return vuo
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCategories(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetCategories(*s)
	}
	return vuo
}

// ClearCategories clears the value of the "categories" field.
func (vuo *VideoUpdateOne) ClearCategories() *VideoUpdateOne {
	vuo.mutation.ClearCategories()
	return vuo
}

// SetVideoPath sets the "video_path" field.
func (vuo *VideoUpdateOne) SetVideoPath(s string) *VideoUpdateOne {
	vuo.mutation.SetVideoPath(s)
	return vuo
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (vuo *VideoUpdateOne) SetThumbnailPath(s string) *VideoUpdateOne {
	vuo.mutation.SetThumbnailPath(s)
	return vuo
}

// SetJSONPath sets the "json_path" field.
func (vuo *VideoUpdateOne) SetJSONPath(s string) *VideoUpdateOne {
	vuo.mutation.SetJSONPath(s)
	return vuo
}

// SetCaptionPath sets the "caption_path" field.
func (vuo *VideoUpdateOne) SetCaptionPath(s string) *VideoUpdateOne {
	vuo.mutation.SetCaptionPath(s)
	return vuo
}

// SetNillableCaptionPath sets the "caption_path" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCaptionPath(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetCaptionPath(*s)
	}
	return vuo
}

// ClearCaptionPath clears the value of the "caption_path" field.
func (vuo *VideoUpdateOne) ClearCaptionPath() *VideoUpdateOne {
	vuo.mutation.ClearCaptionPath()
	return vuo
}

// SetPath sets the "path" field.
func (vuo *VideoUpdateOne) SetPath(s string) *VideoUpdateOne {
	vuo.mutation.SetPath(s)
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VideoUpdateOne) SetUpdatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (vuo *VideoUpdateOne) SetChannelID(id string) *VideoUpdateOne {
	vuo.mutation.SetChannelID(id)
	return vuo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (vuo *VideoUpdateOne) SetChannel(c *Channel) *VideoUpdateOne {
	return vuo.SetChannelID(c.ID)
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (vuo *VideoUpdateOne) AddChapterIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddChapterIDs(ids...)
	return vuo
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (vuo *VideoUpdateOne) AddChapters(c ...*Chapter) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddChapterIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (vuo *VideoUpdateOne) AddCommentIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.AddCommentIDs(ids...)
	return vuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (vuo *VideoUpdateOne) AddComments(c ...*Comment) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddCommentIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (vuo *VideoUpdateOne) ClearChannel() *VideoUpdateOne {
	vuo.mutation.ClearChannel()
	return vuo
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (vuo *VideoUpdateOne) ClearChapters() *VideoUpdateOne {
	vuo.mutation.ClearChapters()
	return vuo
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (vuo *VideoUpdateOne) RemoveChapterIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveChapterIDs(ids...)
	return vuo
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (vuo *VideoUpdateOne) RemoveChapters(c ...*Chapter) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveChapterIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (vuo *VideoUpdateOne) ClearComments() *VideoUpdateOne {
	vuo.mutation.ClearComments()
	return vuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (vuo *VideoUpdateOne) RemoveCommentIDs(ids ...string) *VideoUpdateOne {
	vuo.mutation.RemoveCommentIDs(ids...)
	return vuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (vuo *VideoUpdateOne) RemoveComments(c ...*Comment) *VideoUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideoUpdateOne) Select(field string, fields ...string) *VideoUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Video entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	vuo.defaults()
	return withHooks[*Video, VideoMutation](ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VideoUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := video.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VideoUpdateOne) check() error {
	if _, ok := vuo.mutation.ChannelID(); vuo.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Video.channel"`)
	}
	return nil
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (_node *Video, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: video.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Video.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video.FieldID)
		for _, f := range fields {
			if !video.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != video.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(video.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(video.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(video.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.UploadDate(); ok {
		_spec.SetField(video.FieldUploadDate, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.Uploader(); ok {
		_spec.SetField(video.FieldUploader, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.ViewCount(); ok {
		_spec.SetField(video.FieldViewCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedViewCount(); ok {
		_spec.AddField(video.FieldViewCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.LikeCount(); ok {
		_spec.SetField(video.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(video.FieldLikeCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.DislikeCount(); ok {
		_spec.SetField(video.FieldDislikeCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedDislikeCount(); ok {
		_spec.AddField(video.FieldDislikeCount, field.TypeInt64, value)
	}
	if vuo.mutation.DislikeCountCleared() {
		_spec.ClearField(video.FieldDislikeCount, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Format(); ok {
		_spec.SetField(video.FieldFormat, field.TypeString, value)
	}
	if vuo.mutation.FormatCleared() {
		_spec.ClearField(video.FieldFormat, field.TypeString)
	}
	if value, ok := vuo.mutation.Width(); ok {
		_spec.SetField(video.FieldWidth, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedWidth(); ok {
		_spec.AddField(video.FieldWidth, field.TypeInt64, value)
	}
	if vuo.mutation.WidthCleared() {
		_spec.ClearField(video.FieldWidth, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Height(); ok {
		_spec.SetField(video.FieldHeight, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedHeight(); ok {
		_spec.AddField(video.FieldHeight, field.TypeInt64, value)
	}
	if vuo.mutation.HeightCleared() {
		_spec.ClearField(video.FieldHeight, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Resolution(); ok {
		_spec.SetField(video.FieldResolution, field.TypeString, value)
	}
	if vuo.mutation.ResolutionCleared() {
		_spec.ClearField(video.FieldResolution, field.TypeString)
	}
	if value, ok := vuo.mutation.Fps(); ok {
		_spec.SetField(video.FieldFps, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedFps(); ok {
		_spec.AddField(video.FieldFps, field.TypeFloat64, value)
	}
	if vuo.mutation.FpsCleared() {
		_spec.ClearField(video.FieldFps, field.TypeFloat64)
	}
	if value, ok := vuo.mutation.AudioCodec(); ok {
		_spec.SetField(video.FieldAudioCodec, field.TypeString, value)
	}
	if vuo.mutation.AudioCodecCleared() {
		_spec.ClearField(video.FieldAudioCodec, field.TypeString)
	}
	if value, ok := vuo.mutation.VideoCodec(); ok {
		_spec.SetField(video.FieldVideoCodec, field.TypeString, value)
	}
	if vuo.mutation.VideoCodecCleared() {
		_spec.ClearField(video.FieldVideoCodec, field.TypeString)
	}
	if value, ok := vuo.mutation.Abr(); ok {
		_spec.SetField(video.FieldAbr, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedAbr(); ok {
		_spec.AddField(video.FieldAbr, field.TypeFloat64, value)
	}
	if vuo.mutation.AbrCleared() {
		_spec.ClearField(video.FieldAbr, field.TypeFloat64)
	}
	if value, ok := vuo.mutation.Vbr(); ok {
		_spec.SetField(video.FieldVbr, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedVbr(); ok {
		_spec.AddField(video.FieldVbr, field.TypeFloat64, value)
	}
	if vuo.mutation.VbrCleared() {
		_spec.ClearField(video.FieldVbr, field.TypeFloat64)
	}
	if value, ok := vuo.mutation.Epoch(); ok {
		_spec.SetField(video.FieldEpoch, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedEpoch(); ok {
		_spec.AddField(video.FieldEpoch, field.TypeInt64, value)
	}
	if vuo.mutation.EpochCleared() {
		_spec.ClearField(video.FieldEpoch, field.TypeInt64)
	}
	if value, ok := vuo.mutation.CommentCount(); ok {
		_spec.SetField(video.FieldCommentCount, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedCommentCount(); ok {
		_spec.AddField(video.FieldCommentCount, field.TypeInt64, value)
	}
	if vuo.mutation.CommentCountCleared() {
		_spec.ClearField(video.FieldCommentCount, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Tags(); ok {
		_spec.SetField(video.FieldTags, field.TypeString, value)
	}
	if vuo.mutation.TagsCleared() {
		_spec.ClearField(video.FieldTags, field.TypeString)
	}
	if value, ok := vuo.mutation.Categories(); ok {
		_spec.SetField(video.FieldCategories, field.TypeString, value)
	}
	if vuo.mutation.CategoriesCleared() {
		_spec.ClearField(video.FieldCategories, field.TypeString)
	}
	if value, ok := vuo.mutation.VideoPath(); ok {
		_spec.SetField(video.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ThumbnailPath(); ok {
		_spec.SetField(video.FieldThumbnailPath, field.TypeString, value)
	}
	if value, ok := vuo.mutation.JSONPath(); ok {
		_spec.SetField(video.FieldJSONPath, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CaptionPath(); ok {
		_spec.SetField(video.FieldCaptionPath, field.TypeString, value)
	}
	if vuo.mutation.CaptionPathCleared() {
		_spec.ClearField(video.FieldCaptionPath, field.TypeString)
	}
	if value, ok := vuo.mutation.Path(); ok {
		_spec.SetField(video.FieldPath, field.TypeString, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.ChannelTable,
			Columns: []string{video.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.ChannelTable,
			Columns: []string{video.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !vuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.ChaptersTable,
			Columns: []string{video.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: chapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !vuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.CommentsTable,
			Columns: []string{video.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
